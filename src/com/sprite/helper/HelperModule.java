/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.sprite.helper;

import java.util.HashMap;
import java.lang.Object;
import java.lang.Class;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiImageLruCache;
import org.appcelerator.kroll.common.Log;

import android.app.Activity;
import android.location.Location;
import android.location.LocationProvider;
import android.content.Intent;
import android.os.Bundle;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;

@Kroll.module(name = "Helper", id = "com.sprite.helper")
public class HelperModule extends KrollModule {

	// Standard Debugging variables
	private static final String TAG = "HelperModule";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public HelperModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(TAG, "inside onAppCreate");
		// put module init code that needs to run when the application is
		// created
	}

	// Methods
	@Kroll.method
	public String addShortcut(String className, String name, int iconId) {
		try {
			// Adding shortcut for MainActivity
			// on Home screen
			Activity activity = TiApplication.getAppRootOrCurrentActivity();

			Intent shortcutIntent = new Intent(
					activity.getApplicationContext(), Class.forName(className));

			shortcutIntent.setAction(Intent.ACTION_MAIN);

			Intent addIntent = new Intent();
			addIntent.putExtra("duplicate", false);
			addIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, shortcutIntent);
			addIntent
					.putExtra(Intent.EXTRA_SHORTCUT_NAME, name);
			addIntent.putExtra(
					Intent.EXTRA_SHORTCUT_ICON_RESOURCE,
					Intent.ShortcutIconResource.fromContext(
							activity.getApplicationContext(), iconId));

			addIntent.setAction("com.android.launcher.action.INSTALL_SHORTCUT");

			activity.getApplicationContext().sendBroadcast(addIntent);
			return "ok";
			
		} catch (Exception e) {
			e.printStackTrace();
			return "exp";
		}
	}

	// Methods
	@Kroll.method
	public String example() {
		Log.d(TAG, "example called");
		return "hello world";
	}

	// Properties
	@Kroll.getProperty
	public String getExampleProp() {
		Log.d(TAG, "get example property");
		return "hello world";
	}

	@Kroll.setProperty
	public void setExampleProp(String value) {
		Log.d(TAG, "set example property: " + value);
	}

	// Methods
	@Kroll.method
	long getSystemTotalMemory() {
		return Runtime.getRuntime().totalMemory();
	}

	// Methods
	@Kroll.method
	long getSystemMaxMemory() {
		return Runtime.getRuntime().maxMemory();
	}

	// Methods
	@Kroll.method
	long getSystemFreeMemory() {
		return Runtime.getRuntime().freeMemory();
	}

	// Methods
	@Kroll.method
	void systemGc() {
		System.gc();
		System.gc();
	}

	// Methods
	@Kroll.method
	void freeImageCache() {
		TiImageLruCache.getInstance().evictAll();
	}

	private GPSTracker mGpsTracker = null;
	private KrollFunction mGpsCallback = null;

	HashMap<String, Object> getGpsReturn() {
		HashMap<String, Object> args = new HashMap<String, Object>();
		args.put("longitude", mGpsTracker.getLongitude());
		args.put("latitude", mGpsTracker.getLatitude());
		return args;
	}

	public void gpsUpdateStatus(int status) {
		HashMap<String, Object> args = getGpsReturn();
		String showStatus = null;
		if (status == LocationProvider.AVAILABLE) {
			args.put("err", "ok");
			showStatus = "Available";
		}

		if (status == LocationProvider.TEMPORARILY_UNAVAILABLE) {
			showStatus = "Temporarily Unavailable";
			args.put("err", "fail");
			args.put("msg", showStatus);
		}
		if (status == LocationProvider.OUT_OF_SERVICE) {
			showStatus = "Out of Service";
			args.put("err", "fail");
			args.put("msg", showStatus);
		}

		mGpsCallback.call(getKrollObject(), args);
		mGpsTracker.stopUsingGPS();
		mGpsCallback = null;
	}

	// Methods
	@Kroll.method
	String getLocation(final KrollFunction callback) {
		if (null != mGpsCallback) {
			return "exist";
		}
		Activity activity = TiApplication.getAppRootOrCurrentActivity();
		if (null == mGpsTracker) {
			mGpsTracker = new GPSTracker(activity, this);
		}
		if (!mGpsTracker.canGetLocation()) {
			return "disabled";
		}

		Location loc = mGpsTracker.getLocation();
		if (loc != null) {
			// just return
			HashMap<String, Object> args = getGpsReturn();
			args.put("err", "ok");
			callback.call(getKrollObject(), args);
			mGpsTracker.stopUsingGPS();
			return "success";
		}
		mGpsCallback = callback;
		return "pending";
	}

	@Kroll.method
	void stopUsingGPS() {
		if (null != mGpsTracker) {
			mGpsTracker.stopUsingGPS();
		}
	}

	private LocationClient mBDLocationClient = null;
	private BDLocationListener myBDLocationListener = new MyBDLocationListener();
	private KrollFunction mBDLocationCallback = null;

	@Kroll.method
	String getBDLocation(final KrollFunction callback, HashMap params) {
		if (null != mBDLocationCallback) {
			return "exist";
		}
		if (null == mBDLocationClient) {
			TiApplication app = TiApplication.getInstance();
			mBDLocationClient = new LocationClient(app);
			mBDLocationClient.registerLocationListener(myBDLocationListener);

			// set opt
			LocationClientOption option = new LocationClientOption();
			if (null != params.get("openGps")) {
				boolean b = ((Boolean) params.get("openGps")).booleanValue();
				option.setOpenGps(b);
			}
			if (null != params.get("addrType")) {
				String type = (String) params.get("addrType");
				option.setAddrType(type);
			}
			if (null != params.get("coorType")) {
				String type = (String) params.get("coorType");
				option.setCoorType(type);
			}
			if (null != params.get("scanSpan")) {
				int l = Integer.parseInt(params.get("scanSpan").toString());
				option.setScanSpan(l);
			}
			if (null != params.get("disableCache")) {
				boolean b = ((Boolean) params.get("disableCache"))
						.booleanValue();
				option.disableCache(b);
			}
			if (null != params.get("poiNumber")) {
				int l = Integer.parseInt(params.get("poiNumber").toString());
				option.setPoiNumber(l);
			}
			if (null != params.get("poiDistance")) {
				int l = Integer.parseInt(params.get("poiDistance").toString());
				option.setPoiDistance(l);
			}
			if (null != params.get("poiExtraInfo")) {
				boolean b = ((Boolean) params.get("poiExtraInfo"))
						.booleanValue();
				option.setPoiExtraInfo(b);
			}
			mBDLocationClient.setLocOption(option);
		}

		if (!mBDLocationClient.isStarted()) {
			mBDLocationClient.start();
		}

		// now do request
		String requestType = "location";
		if (null != params.get("requestType")) {
			requestType = (String) params.get("requestType");
		}
		if (requestType.equals("location")) {
			mBDLocationClient.requestLocation();
		} else if (requestType.equals("poi")) {
			mBDLocationClient.requestPoi();
		} else if (requestType.equals("offlineLocation")) {
			mBDLocationClient.requestOfflineLocation();
		} else {
			mBDLocationClient.stop();
			return "errType";
		}
		mBDLocationCallback = callback;
		return "pending";
	}

	public class MyBDLocationListener implements BDLocationListener {
		@Override
		public void onReceiveLocation(BDLocation location) {
			HashMap<String, Object> args = new HashMap<String, Object>();
			if (location == null) {
				args.put("err", "fail");
				args.put("msg", "nullLocation");
			} else {
				args.put("err", "ok");
				args.put("time", location.getTime());
				args.put("latitude", location.getLatitude());
				args.put("longitude", location.getLongitude());
				args.put("city", location.getCity());
				args.put("province", location.getProvince());
				args.put("locTypeCode", location.getLocType());
				if (location.getLocType() == BDLocation.TypeGpsLocation) {
					args.put("locType", "GPS");
					args.put("speed", location.getSpeed());
					args.put("satellite", location.getSatelliteNumber());
				} else if (location.getLocType() == BDLocation.TypeNetWorkLocation) {
					args.put("locType", "NET");
					args.put("addr", location.getAddrStr());
				}
				Log.d(TAG, String.format("%f, %f", location.getLongitude(),
						location.getLatitude()));
			}
			mBDLocationCallback.call(getKrollObject(), args);
			mBDLocationCallback = null;
			mBDLocationClient.stop();
		}

		public void onReceivePoi(BDLocation location) {
			HashMap<String, Object> args = new HashMap<String, Object>();
			if (location == null) {
				args.put("err", "fail");
				args.put("msg", "nullLocation");
			} else {
				args.put("err", "ok");
				args.put("time", location.getTime());
				args.put("latitude", location.getLatitude());
				args.put("longitude", location.getLongitude());
				args.put("radius", location.getRadius());
				args.put("city", location.getCity());
				args.put("province", location.getProvince());
				args.put("locTypeCode", location.getLocType());
				if (location.getLocType() == BDLocation.TypeGpsLocation) {
					args.put("locType", "GPS");
					args.put("speed", location.getSpeed());
					args.put("satellite", location.getSatelliteNumber());
				} else if (location.getLocType() == BDLocation.TypeNetWorkLocation) {
					args.put("locType", "NET");
					args.put("addr", location.getAddrStr());
				}
				if (location.hasPoi()) {
					args.put("poi", location.getPoi());
				}
			}

			mBDLocationCallback.call(getKrollObject(), args);
			mBDLocationCallback = null;
			mBDLocationClient.stop();
		}
	}

}
